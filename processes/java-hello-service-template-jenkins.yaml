apiVersion: v1
kind: Template
metadata:
  name: cicd
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    description: Creates the CI/CD infrastructure with Jenkins
    iconClass: icon-jenkins
    tags: instant-app,jenkins,cicd
  name: cicd
message: The CI/CD infrastructure composed of Jenkins services has been created in your project.  Jenkins username/password are admin/${JENKINS_PASSWORD}.  The tutorial at https://github.com/OpenShiftDemos/openshift-cd-demo/tree/openshift-3.3 contains more information about using this CI/CD demo.
parameters:
- description: Password for the Jenkins user.
  displayName: Jenkins Password
  value: password
  name: JENKINS_PASSWORD
  required: true
objects:
# Jenkins Master
- apiVersion: v1
  kind: Route
  metadata:
    name: jenkins
  spec:
    to:
      kind: Service
      name: jenkins
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: jenkins
  spec:
    replicas: 1
    selector:
      name: jenkins
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: jenkins
      spec:
        containers:
        - capabilities: {}
          env:
          - name: JENKINS_PASSWORD
            value: ${JENKINS_PASSWORD}
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: "true"
          - name: JNLP_SERVICE_NAME
            value: jenkins-jnlp
          - name: JAVA_OPTS
            value: "-Xmx1g"
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 120
            timeoutSeconds: 3
          name: jenkins
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: 1Gi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: jenkins-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - emptyDir:
            medium: ""
          name: jenkins-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - jenkins
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_edit
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: default
- apiVersion: v1
  kind: Service
  metadata:
    name: jenkins-jnlp
    labels:
      app: jenkins
  spec:
    ports:
    - name: agent
      nodePort: 0
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "jenkins-jnlp", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    creationTimestamp: null
    name: jenkins
    labels:
      app: jenkins
  spec:
    portalIP: ""
    ports:
    - name: web
      nodePort: 0
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
# Pipeline - CI
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: java-hello-service-pipeline
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
            // define commands
            def mvnCmd = "mvn -s configuration/settings.xml"

            stage 'Build'
            git branch: 'master', url: 'http://gogs:3000/gogs/java-hello-service.git'
            def v = version()
            sh "${mvnCmd} clean install -DskipTests=true -Popenshift"

            stage 'Test'
            sh "${mvnCmd} org.jacoco:jacoco-maven-plugin:prepare-agent test"
            step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])

            stage 'Deploy DEV'
            sh "oc project java-hello-service-dev"
            // clean up. keep the image stream
            sh "oc delete bc,dc,svc,route -l app=java-hello-service -n java-hello-service-dev"
            // create build. override the exit code since it complains about exising imagestream
            sh "oc new-build --name=java-hello-service --image-stream=jboss-eap70-openshift --binary=true --labels=app=java-hello-service -n java-hello-service-dev || true"
            // build image
            sh "oc start-build java-hello-service --from-dir=deployments --wait=true -n java-hello-service-dev"
            // deploy image
            sh "oc new-app java-hello-service:latest -n java-hello-service-dev"
            sh "oc expose svc/java-hello-service -n java-hello-service-dev"

            stage 'Deploy STAGE'
            input message: "Promote to STAGE?", ok: "Promote"
            sh "oc project java-hello-service-stage"
            // tag for stage
            sh "oc tag java-hello-service-dev/java-hello-service:latest java-hello-service-stage/java-hello-service:${v}"
            // clean up. keep the imagestream
            sh "oc delete bc,dc,svc,route -l app=java-hello-service -n java-hello-service-stage"
            // deploy stage image
            sh "oc new-app java-hello-service:${v} -n java-hello-service-stage"
            sh "oc expose svc/java-hello-service -n java-hello-service-stage"
          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }

      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
# Pipeline - CD - BLUE
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: java-hello-service-deploy-blue
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
            // define commands
            def mvnCmd = "mvn -s configuration/settings.xml"

            stage 'Deploy - BLUE'
            git branch: 'master', url: 'http://gogs:3000/gogs/java-hello-service.git'
            def v = version()

            sh "oc project java-hello-service-prod"
            sh "oc tag java-hello-service-stage/java-hello-service:${v} java-hello-service-prod/java-hello-service:latest"
            sh "oc delete bc,dc,svc -l app=java-hello-service-blue -n java-hello-service-prod"
            sh "oc new-app java-hello-service-prod/java-hello-service:latest -l app=java-hello-service-blue --name=java-hello-service-blue -n java-hello-service-prod"

            sh "oc tag java-hello-service-prod/java-hello-service:latest java-hello-service-prod/java-hello-service:${v}"
            sh "oc expose svc/java-hello-service-blue --name=java-hello-service -n java-hello-service-prod || true"
            sh "oc patch route/java-hello-service -p '{\"spec\":{\"to\":{\"name\":\"java-hello-service-blue\"}}}' -n java-hello-service-prod"

          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }

      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
# Pipeline - CD - GREEN
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: java-hello-service-deploy-green
  spec:
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
            // define commands
            def mvnCmd = "mvn -s configuration/settings.xml"

            stage 'Deploy - GREEN'
            git branch: 'master', url: 'http://gogs:3000/gogs/java-hello-service.git'
            def v = version()

            sh "oc project java-hello-service-prod"
            sh "oc tag java-hello-service-stage/java-hello-service:${v} java-hello-service-prod/java-hello-service:latest"
            sh "oc delete bc,dc,svc -l app=java-hello-service-green -n java-hello-service-prod"
            sh "oc new-app java-hello-service-prod/java-hello-service:latest -l app=java-hello-service-green --name=java-hello-service-green -n java-hello-service-prod"

            sh "oc tag java-hello-service-prod/java-hello-service:latest java-hello-service-prod/java-hello-service:${v}"
            sh "oc expose svc/java-hello-service-green --name=java-hello-service -n java-hello-service-prod || true"
            sh "oc patch route/java-hello-service -p '{\"spec\":{\"to\":{\"name\":\"java-hello-service-green\"}}}' -n java-hello-service-prod"

          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }

      type: JenkinsPipeline
      type: Generic
  status:
    lastVersion: 0
